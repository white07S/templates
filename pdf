#!/usr/bin/env bash
set -euo pipefail

# Usage: ./run_mineru_local.sh <pdf_path> <model_dir> [output_dir='.' ] [cuda_device=0]
# Example:
#   ./run_mineru_local.sh ./doc.pdf /data/models/MinerU2.0-2505-0.9B .
#   ./run_mineru_local.sh ./doc.pdf /data/models/MinerU2.0-2505-0.9B . 0

if [[ $# -lt 2 ]]; then
  echo "Usage: $0 <pdf_path> <model_dir> [output_dir] [cuda_device]"
  exit 1
fi

PDF="$1"
MODEL_DIR="$2"
OUTDIR="${3:-.}"               # default: current dir
CUDA_DEV="${4:-0}"

[[ -f "$PDF" ]] || { echo "Error: PDF not found: $PDF"; exit 2; }
[[ -d "$MODEL_DIR" ]] || { echo "Error: Model dir not found: $MODEL_DIR"; exit 3; }
mkdir -p "$OUTDIR"

# --- Minimal local config for MinerU
CONFIG_DIR="$(mktemp -d)"
CONFIG_JSON="$CONFIG_DIR/mineru_local.json"
cat > "$CONFIG_JSON" <<EOF
{
  "models-dir": {
    "vlm": "$(realpath "$MODEL_DIR")"
  }
}
EOF

# --- Offline + local-only
export MINERU_MODEL_SOURCE=local
export MINERU_TOOLS_CONFIG_JSON="$CONFIG_JSON"
export HF_HUB_OFFLINE=1
export TRANSFORMERS_OFFLINE=1
export CUDA_VISIBLE_DEVICES="$CUDA_DEV"

# --- Quick sanity
shopt -s nullglob
need_warn=0
[[ -f "$MODEL_DIR/config.json" ]] || need_warn=1
ls "$MODEL_DIR"/*.safetensors >/dev/null 2>&1 || need_warn=1
[[ -f "$MODEL_DIR/tokenizer.json" || -f "$MODEL_DIR/tokenizer_config.json" ]] || need_warn=1
[[ -f "$MODEL_DIR/google/siglip-so400m-patch14-384/config.json" ]] || {
  echo "Warning: SigLIP vision encoder not found under: $MODEL_DIR/google/siglip-so400m-patch14-384/"
}
[[ $need_warn -eq 0 ]] || echo "Warning: some expected model files not found; continuing…"

# --- Pick CLI
if command -v mineru >/dev/null 2>&1; then
  CLI="mineru"
else
  CLI="python -m mineru"
fi

echo "==> Running MinerU locally"
echo "PDF:     $PDF"
echo "Model:   $MODEL_DIR"
echo "Output:  $OUTDIR (current dir if '.')"
echo "GPU:     $CUDA_VISIBLE_DEVICES"
echo

# Run (transformers backend). If backend flag unknown, retry without it.
set +e
$CLI -p "$PDF" -o "$OUTDIR" -b vlm-transformers
RC=$?
set -e
if [[ $RC -ne 0 ]]; then
  echo "Backend flag failed; retrying without explicit backend..."
  $CLI -p "$PDF" -o "$OUTDIR"
fi

# --- Put a clean Markdown file in the current dir
base="$(basename "$PDF")"
stem="${base%.*}"

# Find a produced .md (MinerU may nest outputs)
md_src="$(find "$OUTDIR" -type f -name '*.md' | head -n 1 || true)"
if [[ -n "${md_src:-}" ]]; then
  target="./${stem}.md"
  # If found file is already the target, leave it; else copy it to CWD as <stem>.md
  if [[ "$md_src" != "$target" ]]; then
    cp -f "$md_src" "$target"
  fi
  echo "✅ Markdown -> $target"
else
  echo "⚠️  No markdown file found under: $OUTDIR"
fi

echo "Done."
