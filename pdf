#!/usr/bin/env bash
set -euo pipefail

# Usage: ./run_mineru_local.sh /path/to/file.pdf /path/to/local/MinerU2.0-2505-0.9B [output_dir] [cuda_device]
# Example:
#   ./run_mineru_local.sh ./doc.pdf /data/models/MinerU2.0-2505-0.9B ./out 0

if [[ $# -lt 2 ]]; then
  echo "Usage: $0 <pdf_path> <model_dir> [output_dir] [cuda_device]"
  exit 1
fi

PDF="$1"
MODEL_DIR="$2"
OUTDIR="${3:-./mineru_out/$(date +%Y%m%d_%H%M%S)}"
CUDA_DEV="${4:-0}"

# --- Basic checks
if [[ ! -f "$PDF" ]]; then
  echo "Error: PDF not found: $PDF"
  exit 2
fi
if [[ ! -d "$MODEL_DIR" ]]; then
  echo "Error: Model dir not found: $MODEL_DIR"
  exit 3
fi

mkdir -p "$OUTDIR"

# --- Create a minimal local config for MinerU
CONFIG_DIR="$(mktemp -d)"
CONFIG_JSON="$CONFIG_DIR/mineru_local.json"

# Map just the VLM folder; keep keys minimal for offline VLM usage.
cat > "$CONFIG_JSON" <<EOF
{
  "models-dir": {
    "vlm": "$(realpath "$MODEL_DIR")"
  }
}
EOF

# --- Offline + local-only environment
export MINERU_MODEL_SOURCE=local
export MINERU_TOOLS_CONFIG_JSON="$CONFIG_JSON"
export HF_HUB_OFFLINE=1
export TRANSFORMERS_OFFLINE=1
export CUDA_VISIBLE_DEVICES="$CUDA_DEV"

# --- Sanity notes for common issues
if ! ls "$MODEL_DIR"/{config.json,*.safetensors,tokenizer.json,tokenizer_config.json} >/dev/null 2>&1; then
  echo "Warning: expected model files not all found in $MODEL_DIR (config.json / *.safetensors / tokenizer.json)."
  echo "         Ensure the MinerU2.0-2505-0.9B repo contents are here, and the SigLIP vision encoder subfolder exists."
fi
if [[ ! -f "$MODEL_DIR/google/siglip-so400m-patch14-384/config.json" ]]; then
  echo "Warning: missing SigLIP vision encoder under:"
  echo "         $MODEL_DIR/google/siglip-so400m-patch14-384/"
fi

# --- Pick CLI (prefer 'mineru', fallback to 'python -m mineru')
if command -v mineru >/dev/null 2>&1; then
  CLI="mineru"
else
  CLI="python -m mineru"
fi

echo "==> Running MinerU locally"
echo "PDF:     $PDF"
echo "Model:   $MODEL_DIR"
echo "Output:  $OUTDIR"
echo "GPU:     $CUDA_VISIBLE_DEVICES"
echo "Config:  $CONFIG_JSON"
echo

# Try VLM backend explicitly; if the flag name changed, retry without it.
set +e
$CLI -p "$PDF" -o "$OUTDIR" -b vlm-transformers
RC=$?
set -e
if [[ $RC -ne 0 ]]; then
  echo "Backend flag failed or unknown; retrying without explicit backend..."
  $CLI -p "$PDF" -o "$OUTDIR"
fi

echo
echo "âœ… Done. Output -> $OUTDIR"
echo "   (Keep $CONFIG_JSON if you want to reuse the same mapping; otherwise it will be auto-deleted on reboot.)"
