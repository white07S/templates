Got it. Here’s a crisp, copy-pasteable, systemd-free PostgreSQL setup using .deb packages, installed into your own folders, with a Python smoke test.

⸻

0) Assumptions
	•	Debian/Ubuntu host (x86_64 or arm64).
	•	You want PostgreSQL 16 (adjust to 15/17 similarly).
	•	You’ll keep everything under ~/local/pg16 (binaries) and ~/data/pg16 (data).

Tip: If you’re offline, download the .deb files on a machine with internet and move them over, then start from step 2.

⸻

1) Create folders

mkdir -p ~/local/pg16/{pkg,log} ~/data/pg16


⸻

2) Download the needed .deb packages (once)

These are the server + client and the runtime shared libs they depend on. Exact lib package versions vary by distro; the generic names below work on current Ubuntu/Debian.

cd ~/local/pg16/pkg

# Core packages
apt-get download \
  postgresql-16 \
  postgresql-client-16 \
  postgresql-common \
  libpq5

# Likely shared-lib deps (adjust if your distro uses different names)
apt-get download \
  libreadline8 \
  libedit2 \
  libssl3 \
  zlib1g

# On some distros you may also need ICU (version varies, e.g., libicu70/libicu72)
# apt-get download libicu70 || apt-get download libicu72 || true

If you’re fully offline now, just place all those .deb files into ~/local/pg16/pkg/.

⸻

3) Extract the .deb files without installing system-wide

cd ~/local/pg16/pkg
for f in *.deb; do
  dpkg-deb -x "$f" ..
done

This unpacks under ~/local/pg16/usr/... (no root, no system install).

⸻

4) Environment variables for your local Postgres

# --- put these into your shell rc (~/.bashrc) if you like ---
export PG_PREFIX="$HOME/local/pg16"
export PG_HOME="$PG_PREFIX/usr/lib/postgresql/16"
export PG_BIN="$PG_HOME/bin"
export PG_SHARE="$PG_PREFIX/usr/share/postgresql/16"
export PGDATA="$HOME/data/pg16"
# adjust arch dir if arm64 vs x86_64
if [ -d "$PG_PREFIX/usr/lib/x86_64-linux-gnu" ]; then
  export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}"
elif [ -d "$PG_PREFIX/usr/lib/aarch64-linux-gnu" ]; then
  export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/aarch64-linux-gnu:${LD_LIBRARY_PATH}"
fi
export PATH="$PG_BIN:$PATH"

Reload your shell or run the block once in the current shell.

⸻

5) Initialize the data directory (no systemctl)

# Choose a DB superuser name (your Linux user is fine)
DB_SUPERUSER="$(whoami)"

# Initialize cluster
initdb -D "$PGDATA" -U "$DB_SUPERUSER" \
  --encoding=UTF8 --locale=C --data-checksums


⸻

6) Configure port & access (local-only)

# Use a non-default port to avoid clashes
PORT=54329

# postgresql.conf
sed -i "s/^#\?port = .*/port = $PORT/" "$PGDATA/postgresql.conf"
sed -i "s/^#\?listen_addresses = .*/listen_addresses = '127.0.0.1'/" "$PGDATA/postgresql.conf"

# pg_hba.conf (allow local connections)
cat >> "$PGDATA/pg_hba.conf" <<'EOF'

# local trust for the current user; tighten as needed
local   all             all                                     trust
host    all             all             127.0.0.1/32            trust
EOF

Security note: trust is fine for a local dev box. For anything else, switch to md5/scram-sha-256 and set a password.

⸻

7) Start & stop the server (no systemd)

# Start
pg_ctl -D "$PGDATA" -l "$PG_PREFIX/log/server.log" start

# Check status
pg_ctl -D "$PGDATA" status

# (Optional) set a password if you plan to use md5/scram later
# psql -p $PORT -d postgres -c "ALTER USER $DB_SUPERUSER WITH PASSWORD 'change_me_strong';"

# Stop (when needed)
# pg_ctl -D "$PGDATA" stop -m fast


⸻

8) Quick psql sanity check

psql -p $PORT -d postgres -c "select version();"


⸻

9) Python smoke test (psycopg 3)

python3 -m venv ~/local/pg16/venv
source ~/local/pg16/venv/bin/activate
pip install --upgrade pip
pip install "psycopg[binary]"

# save as test_pg.py and run: python test_pg.py
import psycopg
import os

port = int(os.environ.get("PORT", "54329"))
user = os.environ.get("USER")  # same as initdb superuser
dsn = f"host=127.0.0.1 port={port} dbname=postgres user={user}"

with psycopg.connect(dsn) as conn:
    with conn.cursor() as cur:
        cur.execute("CREATE TABLE IF NOT EXISTS t_ping (id serial primary key, msg text)")
        cur.execute("INSERT INTO t_ping (msg) VALUES ('hello from psycopg3') RETURNING id, msg")
        row = cur.fetchone()
        cur.execute("SELECT count(*) FROM t_ping")
        total, = cur.fetchone()
        print("Inserted:", row)
        print("Total rows in t_ping:", total)

Expected output shows one inserted row and the total count.

⸻

10) Run everything in one go (helper script, optional)

cat > ~/local/pg16/run.sh <<'EOS'
#!/usr/bin/env bash
set -euo pipefail

export PG_PREFIX="$HOME/local/pg16"
export PG_HOME="$PG_PREFIX/usr/lib/postgresql/16"
export PG_BIN="$PG_HOME/bin"
export PG_SHARE="$PG_PREFIX/usr/share/postgresql/16"
export PGDATA="$HOME/data/pg16"
if [ -d "$PG_PREFIX/usr/lib/x86_64-linux-gnu" ]; then
  export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH:-}"
elif [ -d "$PG_PREFIX/usr/lib/aarch64-linux-gnu" ]; then
  export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/aarch64-linux-gnu:${LD_LIBRARY_PATH:-}"
fi
export PATH="$PG_BIN:$PATH"
export PORT=54329

case "${1:-}" in
  start)
    pg_ctl -D "$PGDATA" -l "$PG_PREFIX/log/server.log" start
    ;;
  stop)
    pg_ctl -D "$PGDATA" stop -m fast
    ;;
  status)
    pg_ctl -D "$PGDATA" status || true
    ;;
  psql)
    exec psql -p "$PORT" -d postgres
    ;;
  *)
    echo "Usage: $0 {start|stop|status|psql}"
    exit 1
    ;;
esac
EOS
chmod +x ~/local/pg16/run.sh

Use:

~/local/pg16/run.sh start
~/local/pg16/run.sh status
~/local/pg16/run.sh psql
~/local/pg16/run.sh stop


⸻

Notes & Troubleshooting
	•	If initdb or postgres complains about missing libs (e.g., libreadline.so, libicu.so, libssl.so), download their .deb and re-extract into ~/local/pg16. Ensure LD_LIBRARY_PATH points to the correct .../usr/lib/*-linux-gnu directory created by extraction.
	•	You can move this whole tree elsewhere; just update the env vars. No root/sudo required, no system files touched.
	•	To run multiple versions in parallel, repeat the above with different PG_PREFIX, PGDATA, and PORT.
