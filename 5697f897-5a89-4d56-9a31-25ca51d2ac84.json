#!/usr/bin/env bash
# pg-local.sh â€” install & run PostgreSQL 16 locally from .deb files, no systemd
# Usage:
#   ./pg-local.sh setup          # download .debs, extract, initdb, configure
#   ./pg-local.sh start          # start server
#   ./pg-local.sh stop           # stop server
#   ./pg-local.sh status         # status
#   ./pg-local.sh psql           # open psql
#   ./pg-local.sh print-python   # print Python test to ./test_pg.py
#   ./pg-local.sh purge          # remove local install (keeps data unless -y)

set -euo pipefail

# ----------- configurable (change if you want) -----------------
PG_MAJOR=16
PORT=${PORT:-54329}
PREFIX=${PREFIX:-"$HOME/local/pg$PG_MAJOR"}   # where binaries/libs land
DATADIR=${DATADIR:-"$HOME/data/pg$PG_MAJOR"}  # where cluster lives (persistent)
LOGDIR="$PREFIX/log"
PKGDIR="$PREFIX/pkg"
# ---------------------------------------------------------------

CODENAME="$(. /etc/os-release; echo "${UBUNTU_CODENAME:-$(lsb_release -sc 2>/dev/null || echo jammy)}")"
ARCH="$(dpkg --print-architecture 2>/dev/null || echo amd64)"

mkdir -p "$LOGDIR" "$PKGDIR" "$DATADIR"

pg_urls() {
  # Choose matching builds by codename + arch
  # Server & client from PGDG pool:
  local base_pg="https://download.postgresql.org/pub/repos/apt/pool/main/p/postgresql-${PG_MAJOR}"
  local pkg_suffix=""
  case "$CODENAME" in
    jammy)  pkg_suffix="pgdg22.04+1" ;;
    noble)  pkg_suffix="pgdg24.04+1" ;;
    *)      echo "Unsupported codename '$CODENAME'. Set CODENAME env to jammy or noble." >&2; exit 2 ;;
  esac

  local srv="${base_pg}/postgresql-${PG_MAJOR}_16.10-1.${pkg_suffix}_${ARCH}.deb"
  local cli="${base_pg}/postgresql-client-${PG_MAJOR}_16.10-1.${pkg_suffix}_${ARCH}.deb"

  # libpq5 from Ubuntu security (fits the OS libc/ssl); version depends on series:
  local libpq=""
  if [[ "$CODENAME" == "noble" ]]; then
    libpq="https://security.ubuntu.com/ubuntu/pool/main/p/postgresql-16/libpq5_16.10-0ubuntu0.24.04.1_${ARCH}.deb"
  else
    # jammy
    libpq="https://security.ubuntu.com/ubuntu/pool/main/p/postgresql-14/libpq5_14.19-0ubuntu0.22.04.1_${ARCH}.deb"
  fi

  printf "%s\n%s\n%s\n" "$srv" "$cli" "$libpq"
}

need_cmd() { command -v "$1" >/dev/null 2>&1 || { echo "Missing required command: $1" >&2; exit 2; }; }

export_vars() {
  export PG_PREFIX="$PREFIX"
  export PG_HOME="$PG_PREFIX/usr/lib/postgresql/${PG_MAJOR}"
  export PG_BIN="$PG_HOME/bin"
  export PG_SHARE="$PG_PREFIX/usr/share/postgresql/${PG_MAJOR}"
  export PGDATA="$DATADIR"
  if [[ -d "$PG_PREFIX/usr/lib/x86_64-linux-gnu" ]]; then
    export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH:-}"
  elif [[ -d "$PG_PREFIX/usr/lib/aarch64-linux-gnu" ]]; then
    export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/aarch64-linux-gnu:${LD_LIBRARY_PATH:-}"
  fi
  export PATH="$PG_BIN:$PATH"
}

download() {
  need_cmd curl
  echo ">>> Downloading .debs to $PKGDIR (codename=$CODENAME arch=$ARCH)"
  pg_urls | while read -r url; do
    fn="$PKGDIR/$(basename "$url")"
    if [[ ! -f "$fn" ]]; then
      echo "  - $url"
      curl -fL --retry 3 -o "$fn.partial" "$url"
      mv "$fn.partial" "$fn"
    else
      echo "  - exists: $(basename "$fn")"
    fi
  done
}

extract_pkgs() {
  need_cmd dpkg-deb
  echo ">>> Extracting packages into $PREFIX"
  shopt -s nullglob
  for deb in "$PKGDIR"/*.deb; do
    echo "  - $(basename "$deb")"
    dpkg-deb -x "$deb" "$PREFIX"
  done
}

init_db() {
  export_vars
  if [[ -s "$PGDATA/PG_VERSION" ]]; then
    echo ">>> PGDATA already initialized at $PGDATA"
    return
  fi
  echo ">>> initdb at $PGDATA"
  mkdir -p "$PGDATA"
  DBUSER="${USER:-$(id -un)}"
  "$PG_BIN/initdb" -D "$PGDATA" -U "$DBUSER" --encoding=UTF8 --locale=C --data-checksums
  # Basic config: localhost only + custom port
  sed -i "s/^#\?port = .*/port = ${PORT}/" "$PGDATA/postgresql.conf"
  sed -i "s/^#\?listen_addresses = .*/listen_addresses = '127.0.0.1'/" "$PGDATA/postgresql.conf"
  # Local trust for convenience (dev only)
  {
    echo ""
    echo "# added by pg-local.sh"
    echo "local   all   all                 trust"
    echo "host    all   all  127.0.0.1/32  trust"
  } >> "$PGDATA/pg_hba.conf"
}

start_pg() {
  export_vars
  echo ">>> Starting PostgreSQL (port $PORT)"
  "$PG_BIN/pg_ctl" -D "$PGDATA" -l "$LOGDIR/server.log" start
}

stop_pg() {
  export_vars
  echo ">>> Stopping PostgreSQL"
  "$PG_BIN/pg_ctl" -D "$PGDATA" stop -m fast
}

status_pg() {
  export_vars
  "$PG_BIN/pg_ctl" -D "$PGDATA" status || true
}

psql_pg() {
  export_vars
  exec "$PG_BIN/psql" -p "$PORT" -d postgres
}

print_python() {
  cat > ./test_pg.py <<'PY'
import os, psycopg
port = int(os.environ.get("PORT", "54329"))
user = os.environ.get("USER", "postgres")
dsn = f"host=127.0.0.1 port={port} dbname=postgres user={user}"
with psycopg.connect(dsn) as conn:
    with conn.cursor() as cur:
        cur.execute("CREATE TABLE IF NOT EXISTS t_ping (id serial primary key, msg text)")
        cur.execute("INSERT INTO t_ping (msg) VALUES ('hello from psycopg3') RETURNING id, msg")
        row = cur.fetchone()
        cur.execute("SELECT count(*) FROM t_ping")
        total, = cur.fetchone()
        print("Inserted:", row)
        print("Total rows in t_ping:", total)
PY
  echo ">>> Wrote ./test_pg.py"
  echo "    Create venv and run:"
  echo "      python3 -m venv .venv && . .venv/bin/activate && pip install --upgrade pip && pip install 'psycopg[binary]'"
  echo "      PORT=$PORT python ./test_pg.py"
}

purge() {
  echo ">>> This will delete $PREFIX. Data dir: $DATADIR (kept). Continue? (y/N)"
  if [[ "${1:-}" != "-y" ]]; then
    read -r ans; [[ "$ans" == "y" || "$ans" == "Y" ]] || { echo "aborted"; exit 1; }
  fi
  rm -rf "$PREFIX"
  echo ">>> Removed $PREFIX. You can remove data with: rm -rf '$DATADIR'"
}

setup_all() {
  download
  extract_pkgs
  export_vars
  # quick dependency hint if something is missing
  if ! ldd "$PG_BIN/postgres" | grep -q "not found"; then
    :
  else
    echo "!!! Some shared libs are missing on your system (see ldd output above)."
    echo "    Install the missing system libs (e.g., libreadline8, libssl3, zlib1g, libicu) via apt, or download their .deb and extract into $PREFIX/usr/lib/*-linux-gnu."
  fi
  init_db
  echo ">>> Setup complete."
  echo ">>> Start server with: $0 start"
  echo ">>> psql with:         $0 psql"
}

case "${1:-}" in
  setup)         setup_all ;;
  start)         start_pg ;;
  stop)          stop_pg ;;
  status)        status_pg ;;
  psql)          psql_pg ;;
  print-python)  print_python ;;
  purge)         purge "${2:-}" ;;
  *)
    cat <<EOF
Usage: $0 {setup|start|stop|status|psql|print-python|purge [-y]}
Env vars: PREFIX='$PREFIX' DATADIR='$DATADIR' PORT='$PORT'
EOF
    exit 1
    ;;
esac
