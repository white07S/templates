#!/usr/bin/env bash
# pg-local.sh — local PostgreSQL 16 from .debs, no systemd.
# Usage:
#   ./pg-local.sh setup          # download (if possible), extract, initdb, configure
#   ./pg-local.sh start          # start server
#   ./pg-local.sh stop           # stop server
#   ./pg-local.sh status         # status
#   ./pg-local.sh psql           # open psql
#   ./pg-local.sh print-python   # write ./test_pg.py (psycopg3 smoke test)
#   ./pg-local.sh purge [-y]     # remove install (keeps data unless you rm it)

set -euo pipefail

# ---------------- configurable defaults ----------------
PG_MAJOR="${PG_MAJOR:-16}"
PORT="${PORT:-54329}"
# Accept only jammy (22.04) or noble (24.04); map "nobel" -> "noble"; ignore focal.
_raw_codename="${CODENAME:-}"
if [[ -z "${_raw_codename}" ]]; then
  # Try to detect, but fall back to jammy if anything else is detected
  if [[ -r /etc/os-release ]]; then
    _raw_codename="$(. /etc/os-release; echo "${UBUNTU_CODENAME:-}")"
  fi
fi
_raw_codename="${_raw_codename,,}"
case "${_raw_codename}" in
  noble|nobel) CODENAME="noble" ;;
  jammy|"")    CODENAME="jammy" ;;
  *)           CODENAME="jammy" ;;  # force to jammy to avoid focal/etc surprises
esac

ARCH="$(dpkg --print-architecture 2>/dev/null || echo amd64)"

PREFIX="${PREFIX:-"$HOME/local/pg$PG_MAJOR"}"      # install root (binaries/libs)
DATADIR="${DATADIR:-"$HOME/data/pg$PG_MAJOR"}"     # persistent data dir
PKGDIR="${PKGDIR:-"$PREFIX/pkg"}"                  # *.deb folder (MUST exist)
LOGDIR="$PREFIX/log"
# ------------------------------------------------------

need_cmd() { command -v "$1" >/null 2>&1 || { echo "Missing required command: $1" >&2; exit 2; }; }

die() { echo "ERROR: $*" >&2; exit 1; }

mkdir -p "$LOGDIR" || true
# Per your requirement: if PKGDIR doesn't exist, STOP immediately.
if [[ ! -d "$PKGDIR" ]]; then
  echo "Package directory does not exist: $PKGDIR"
  echo "Create/mount it first, then rerun. Example:"
  echo "  mkdir -p \"$PKGDIR\""
  exit 3
fi
mkdir -p "$DATADIR" || true

export_vars() {
  export PG_PREFIX="$PREFIX"
  export PG_HOME="$PG_PREFIX/usr/lib/postgresql/${PG_MAJOR}"
  export PG_BIN="$PG_HOME/bin"
  export PG_SHARE="$PG_PREFIX/usr/share/postgresql/${PG_MAJOR}"
  export PGDATA="$DATADIR"
  if [[ -d "$PG_PREFIX/usr/lib/x86_64-linux-gnu" ]]; then
    export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH:-}"
  elif [[ -d "$PG_PREFIX/usr/lib/aarch64-linux-gnu" ]]; then
    export LD_LIBRARY_PATH="$PG_PREFIX/usr/lib/aarch64-linux-gnu:${LD_LIBRARY_PATH:-}"
  fi
  export PATH="$PG_BIN:$PATH"
}

# Build the list of direct URLs we require.
# - Server & Client from PGDG (pinned to 16.10 build series for stability)
# - libpq5 from Ubuntu security repo matching the series (jammy/noble)
pg_urls() {
  local base_pg="https://download.postgresql.org/pub/repos/apt/pool/main/p/postgresql-${PG_MAJOR}"
  local pkg_suffix=""
  case "$CODENAME" in
    jammy) pkg_suffix="pgdg22.04+1" ;;
    noble) pkg_suffix="pgdg24.04+1" ;;
    *)     pkg_suffix="pgdg22.04+1" ;; # safe default
  esac

  # Versions pinned – adjust here if PGDG bumps:
  local srv="${base_pg}/postgresql-${PG_MAJOR}_16.10-1.${pkg_suffix}_${ARCH}.deb"
  local cli="${base_pg}/postgresql-client-${PG_MAJOR}_16.10-1.${pkg_suffix}_${ARCH}.deb"

  # Series-matched libpq5 (version differs by series):
  local libpq=""
  if [[ "$CODENAME" == "noble" ]]; then
    libpq="https://security.ubuntu.com/ubuntu/pool/main/p/postgresql-16/libpq5_16.10-0ubuntu0.24.04.1_${ARCH}.deb"
  else
    # jammy
    libpq="https://security.ubuntu.com/ubuntu/pool/main/p/postgresql-14/libpq5_14.19-0ubuntu0.22.04.1_${ARCH}.deb"
  fi

  # Print the required list (one per line)
  printf "%s\n%s\n%s\n" "$srv" "$cli" "$libpq"
}

# Attempt to download all URLs. On ANY curl error (esp. SSL), print the URL list and exit.
download_pkgs() {
  need_cmd curl
  echo ">>> Target series: $CODENAME  arch: $ARCH"
  echo ">>> Downloading into: $PKGDIR"
  local urls=()
  mapfile -t urls < <(pg_urls)

  local had_error=0
  for url in "${urls[@]}"; do
    local fn="$PKGDIR/$(basename "$url")"
    if [[ -f "$fn" ]]; then
      echo "  - exists: $(basename "$fn")"
      continue
    fi
    echo "  - fetching: $url"
    if ! curl -fL --retry 2 -o "$fn.partial" "$url"; then
      had_error=1
      rm -f "$fn.partial" || true
      break
    fi
    mv "$fn.partial" "$fn"
  done

  if [[ $had_error -ne 0 ]]; then
    echo
    echo "!!! Download failed (possible SSL/cert or network issue)."
    echo ">>> Please MANUALLY download the following URLs and place the .deb files into:"
    echo "    $PKGDIR"
    echo "----- REQUIRED URLS START -----"
    printf "%s\n" "${urls[@]}"
    echo "----- REQUIRED URLS END -----"
    echo
    echo "Then rerun: $0 setup"
    exit 4
  fi
}

extract_pkgs() {
  need_cmd dpkg-deb
  echo ">>> Extracting .deb packages into: $PREFIX"
  shopt -s nullglob
  local count=0
  for deb in "$PKGDIR"/*.deb; do
    echo "  - extracting: $(basename "$deb")"
    dpkg-deb -x "$deb" "$PREFIX"
    ((count++)) || true
  done
  if [[ $count -eq 0 ]]; then
    die "No .deb files found in $PKGDIR. Place them there and rerun."
  fi
}

init_db() {
  export_vars
  if [[ -s "$PGDATA/PG_VERSION" ]]; then
    echo ">>> PGDATA already initialized at $PGDATA"
    return
  fi
  echo ">>> initdb at $PGDATA"
  mkdir -p "$PGDATA"
  local DBUSER="${USER:-$(id -un)}"
  "$PG_BIN/initdb" -D "$PGDATA" -U "$DBUSER" --encoding=UTF8 --locale=C --data-checksums

  # Basic config: localhost only + custom port
  sed -i "s/^#\?port = .*/port = ${PORT}/" "$PGDATA/postgresql.conf"
  sed -i "s/^#\?listen_addresses = .*/listen_addresses = '127.0.0.1'/" "$PGDATA/postgresql.conf"

  # Local trust for dev convenience (switch to md5/scram for auth if needed)
  {
    echo ""
    echo "# added by pg-local.sh"
    echo "local   all   all                 trust"
    echo "host    all   all  127.0.0.1/32  trust"
  } >> "$PGDATA/pg_hba.conf"
}

start_pg() {
  export_vars
  echo ">>> Starting PostgreSQL (port $PORT)"
  "$PG_BIN/pg_ctl" -D "$PGDATA" -l "$LOGDIR/server.log" start
}

stop_pg() {
  export_vars
  echo ">>> Stopping PostgreSQL"
  "$PG_BIN/pg_ctl" -D "$PGDATA" stop -m fast
}

status_pg() {
  export_vars
  "$PG_BIN/pg_ctl" -D "$PGDATA" status || true
}

psql_pg() {
  export_vars
  exec "$PG_BIN/psql" -p "$PORT" -d postgres
}

print_python() {
  cat > ./test_pg.py <<'PY'
import os, psycopg
port = int(os.environ.get("PORT", "54329"))
user = os.environ.get("USER", "postgres")
dsn = f"host=127.0.0.1 port={port} dbname=postgres user={user}"
with psycopg.connect(dsn) as conn:
    with conn.cursor() as cur:
        cur.execute("CREATE TABLE IF NOT EXISTS t_ping (id serial primary key, msg text)")
        cur.execute("INSERT INTO t_ping (msg) VALUES ('hello from psycopg3') RETURNING id, msg")
        row = cur.fetchone()
        cur.execute("SELECT count(*) FROM t_ping")
        total, = cur.fetchone()
        print("Inserted:", row)
        print("Total rows in t_ping:", total)
PY
  echo ">>> Wrote ./test_pg.py"
  echo "    Create venv and run:"
  echo "      python3 -m venv .venv && . .venv/bin/activate && pip install --upgrade pip && pip install 'psycopg[binary]'"
  echo "      PORT=$PORT python ./test_pg.py"
}

purge() {
  echo ">>> This will DELETE install dir: $PREFIX"
  echo "    Data dir (PGDATA) is at: $DATADIR  (NOT removed by this command)"
  if [[ "${1:-}" != "-y" ]]; then
    read -r -p "Continue? (y/N) " ans
    [[ "$ans" == "y" || "$ans" == "Y" ]] || { echo "aborted"; exit 1; }
  fi
  rm -rf "$PREFIX"
  echo ">>> Removed $PREFIX. To remove data:"
  echo "    rm -rf '$DATADIR'"
}

setup_all() {
  echo ">>> Series: $CODENAME  Arch: $ARCH"
  echo ">>> Install prefix: $PREFIX"
  echo ">>> Package dir:    $PKGDIR"
  echo ">>> Data dir:       $DATADIR"
  # If .debs already present, skip download; else attempt download.
  shopt -s nullglob
  debs=("$PKGDIR"/*.deb)
  if [[ ${#debs[@]} -eq 0 ]]; then
    echo ">>> No .debs found—attempting download..."
    if command -v curl >/null 2>&1; then
      download_pkgs
    else
      echo "curl not available to download."
      echo ">>> Please manually download the following URLs into $PKGDIR :"
      echo "----- REQUIRED URLS START -----"
      pg_urls
      echo "----- REQUIRED URLS END -----"
      exit 5
    fi
  else
    echo ">>> Found existing .debs in $PKGDIR — using them"
  fi

  extract_pkgs
  export_vars

  # Quick missing-lib hint (does not resolve automatically)
  if ldd "$PG_BIN/postgres" | grep -q "not found"; then
    echo "!!! Some shared libraries are missing. ldd output:"
    ldd "$PG_BIN/postgres" | grep "not found" || true
    echo "Install missing libs system-wide OR download matching .deb files and extract into:"
    echo "  $PREFIX/usr/lib/*-linux-gnu"
    echo "Examples (series-specific): libicu, libreadline8, libssl3, zlib1g"
  fi

  init_db
  echo ">>> Setup complete."
  echo ">>> Start server with: $0 start"
  echo ">>> psql with:         $0 psql"
}

case "${1:-}" in
  setup)         setup_all ;;
  start)         start_pg ;;
  stop)          stop_pg ;;
  status)        status_pg ;;
  psql)          psql_pg ;;
  print-python)  print_python ;;
  purge)         purge "${2:-}" ;;
  *)
    cat <<EOF
Usage: $0 {setup|start|stop|status|psql|print-python|purge [-y]}
Env:   CODENAME=[jammy|noble] (default: auto -> jammy/noble else jammy)
       PREFIX='$PREFIX'
       DATADIR='$DATADIR'
       PKGDIR='$PKGDIR'   (MUST exist; script stops if missing)
       PORT='$PORT'
EOF
    exit 1
    ;;
esac
